/* -*- mode: C++; tab-width:4; c-basic-offset: 4; indent-tabs-mode:nil -*-
 ***********************************************************************
 *
 *  File: shadergen.cpp
 *
 *  Created: 24. June 2009
 *
 *  Version: $Id: $
 *
 *  Authors: Christopher Dyken <christopher.dyken@sintef.no>
 *
 *  This file is part of the HPMC library.
 *  Copyright (C) 2009 by SINTEF.  All rights reserved.
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  ("GPL") version 2 as published by the Free Software Foundation.
 *  See the file LICENSE.GPL at the root directory of this source
 *  distribution for additional information about the GNU GPL.
 *
 *  For using HPMC with software that can not be combined with the
 *  GNU GPL, please contact SINTEF for aquiring a commercial license
 *  and support.
 *
 *  SINTEF, Pb 124 Blindern, N-0314 Oslo, Norway
 *  http://www.sintef.no
 *********************************************************************/

#include <cstdlib>
#include <cmath>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <string>
#include <hpmc.h>
#include <hpmc_internal.h>
#include "Constants.hpp"
#include "IsoSurface.hpp"
#include "HistoPyramid.hpp"

using std::endl;
using std::max;
using std::string;
using std::stringstream;
using std::cerr;

// -----------------------------------------------------------------------------
std::string
HPMCgenerateDefines( const struct HPMCIsoSurface* h )
{
    std::stringstream src;

    src << "// generated by HPMCgenerateDefines" << endl;
    //      voxel sizes of scalar function
    src << "#define HPMC_FUNC_X        " << h->field().sizeX() << endl;
    src << "#define HPMC_FUNC_X_F      float(HPMC_FUNC_X)" << endl;
    src << "#define HPMC_FUNC_Y        " << h->field().sizeY() << endl;
    src << "#define HPMC_FUNC_Y_F      float(HPMC_FUNC_Y)" << endl;
    src << "#define HPMC_FUNC_Z        " << h->field().sizeZ() << endl;
    src << "#define HPMC_FUNC_Z_F      float(HPMC_FUNC_Z)" << endl;
    //      cell grid dimension
    src << "#define HPMC_CELLS_X       " << h->field().cellsX() << endl;
    src << "#define HPMC_CELLS_X_F     float(HPMC_CELLS_X)" << endl;
    src << "#define HPMC_CELLS_Y       " << h->field().cellsY() << endl;
    src << "#define HPMC_CELLS_Y_F     float(HPMC_CELLS_Y)" << endl;
    src << "#define HPMC_CELLS_Z       " << h->field().cellsZ() << endl;
    src << "#define HPMC_CELLS_Z_F     float(HPMC_CELLS_Z)" << endl;
    //      cell grid extent
    src << "#define HPMC_GRID_EXT_X_F  float("<<h->field().extentX()<<")"<<endl;
    src << "#define HPMC_GRID_EXT_Y_F  float("<<h->field().extentY()<<")"<<endl;
    src << "#define HPMC_GRID_EXT_Z_F  float("<<h->field().extentZ()<<")"<<endl;
    //      tiling in base layer
    src << "#define HPMC_TILES_X       " << h->baseLevelBuilder().layoutX() << endl;
    src << "#define HPMC_TILES_X_F     float(HPMC_TILES_X)" << endl;
    src << "#define HPMC_TILES_Y       " << h->baseLevelBuilder().layoutY() << endl;
    src << "#define HPMC_TILES_Y_F     float(HPMC_TILES_Y)" << endl;
    //      tile size in base layer
    src << "#define HPMC_TILE_SIZE_X   " << h->baseLevelBuilder().tileSizeX() << endl;
    src << "#define HPMC_TILE_SIZE_X_F float(HPMC_TILE_SIZE_X)" << endl;
    src << "#define HPMC_TILE_SIZE_Y   " << h->baseLevelBuilder().tileSizeY() << endl;
    src << "#define HPMC_TILE_SIZE_Y_F float(HPMC_TILE_SIZE_Y)" << endl;
    //      histopyramid size
    src << "#define HPMC_HP_SIZE_L2  " << h->baseLevelBuilder().log2Size() << endl;

    return src.str();
}




// -----------------------------------------------------------------------------
std::string
HPMCgenerateExtractVertexFunction( struct HPMCIsoSurface* h )
{
    HPMCTarget target = h->constants()->target();
    stringstream src;

    src << "uniform sampler2D  HPMC_histopyramid;" << endl;
    src << "uniform float      HPMC_threshold;" << endl;
    src << "uniform sampler2D  HPMC_edge_table;" << endl;
    src << h->histoPyramid().downTraversalSource();
    src << h->baseLevelBuilder().extractSource();
    src << "// generated by HPMCgenerateExtractShaderFunctions" << endl;
    if( target < HPMC_TARGET_GL30_GLSL130  ) {
        src << "uniform float      HPMC_key_offset;" << endl;
    }
    src << "void" << endl;
    src << "extractVertex( out vec3 a, out vec3 b, out vec3 p, out vec3 n )" << endl;
    src << "{" << endl;
    if( target < HPMC_TARGET_GL30_GLSL130 ) {
        src << "    float key = gl_Vertex.x + HPMC_key_offset;" << endl;
    }
    else {
        src << "    float key = gl_VertexID;" << endl;
    }
    src << "    HPMC_baseLevelExtract( a, b, p, n, key );" << endl;
    src << "}" << endl;
    src << "void" << endl;
    src << "extractVertex( out vec3 p, out vec3 n )" << endl;
    src << "{" << endl;
    src << "    vec3 a, b;" << endl;
    src << "    extractVertex( a, b, p, n );" << endl;
    src << "}" << endl;
    return src.str();
}
